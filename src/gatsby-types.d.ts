/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ScenesPrimaryCsv or null if there are no children of given type on this node */
  readonly childScenesPrimaryCsv: Maybe<ScenesPrimaryCsv>;
  /** Returns the first child node of type ScenesSecondaryCsv or null if there are no children of given type on this node */
  readonly childScenesSecondaryCsv: Maybe<ScenesSecondaryCsv>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ScenesPrimaryCsv */
  readonly childrenScenesPrimaryCsv: Maybe<ReadonlyArray<Maybe<ScenesPrimaryCsv>>>;
  /** Returns all children nodes filtered by type ScenesSecondaryCsv */
  readonly childrenScenesSecondaryCsv: Maybe<ReadonlyArray<Maybe<ScenesSecondaryCsv>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childScenesPrimaryCsv.DE__Basisszenario'
  | 'childScenesPrimaryCsv.DE__Breite_RVA_nutzbar'
  | 'childScenesPrimaryCsv.DE__Experiment'
  | 'childScenesPrimaryCsv.DE__FS_Art'
  | 'childScenesPrimaryCsv.DE__FS_Geschwindigkeit'
  | 'childScenesPrimaryCsv.DE__GW_Breite'
  | 'childScenesPrimaryCsv.DE__GW_Gesch_ftsnutzung'
  | 'childScenesPrimaryCsv.DE__Kamera'
  | 'childScenesPrimaryCsv.DE__Links_RVA'
  | 'childScenesPrimaryCsv.DE__Parken'
  | 'childScenesPrimaryCsv.DE__Protected'
  | 'childScenesPrimaryCsv.DE__RVA_Breite'
  | 'childScenesPrimaryCsv.DE__RVA_Lage'
  | 'childScenesPrimaryCsv.DE__RVA_Oberfl_che'
  | 'childScenesPrimaryCsv.DE__SceneID'
  | 'childScenesPrimaryCsv.DE__Seitenraum'
  | 'childScenesPrimaryCsv.DE__Tr_li_Art'
  | 'childScenesPrimaryCsv.DE__Tr_li_Breite'
  | 'childScenesPrimaryCsv.DE__Tr_li_Markierung'
  | 'childScenesPrimaryCsv.DE__Tr_li_baulTrennung'
  | 'childScenesPrimaryCsv.DE__Tr_re_Art'
  | 'childScenesPrimaryCsv.DE__Tr_re_Breite'
  | 'childScenesPrimaryCsv.DE__Tr_re_Markierung'
  | 'childScenesPrimaryCsv.DE__Verkehrsaufkommen'
  | 'childScenesPrimaryCsv.HELPER__imageUrl'
  | 'childScenesPrimaryCsv.HELPER__sceneNumber'
  | 'childScenesPrimaryCsv.TODO__slug'
  | 'childScenesPrimaryCsv.bicycleLaneSurface'
  | 'childScenesPrimaryCsv.bicycleLaneUsableWidthNumber'
  | 'childScenesPrimaryCsv.bicycleLaneWidth'
  | 'childScenesPrimaryCsv.bicycleLaneWidthNumber'
  | 'childScenesPrimaryCsv.bufferHasPhysicalProtection'
  | 'childScenesPrimaryCsv.bufferLeftMarking'
  | 'childScenesPrimaryCsv.bufferLeftPhysicalProtection'
  | 'childScenesPrimaryCsv.bufferLeftWidth'
  | 'childScenesPrimaryCsv.bufferLeftWidthNumber'
  | 'childScenesPrimaryCsv.bufferRightMarking'
  | 'childScenesPrimaryCsv.bufferRightWidth'
  | 'childScenesPrimaryCsv.bufferRightWidthNumber'
  | 'childScenesPrimaryCsv.children'
  | 'childScenesPrimaryCsv.children.children'
  | 'childScenesPrimaryCsv.children.children.children'
  | 'childScenesPrimaryCsv.children.children.id'
  | 'childScenesPrimaryCsv.children.id'
  | 'childScenesPrimaryCsv.children.internal.content'
  | 'childScenesPrimaryCsv.children.internal.contentDigest'
  | 'childScenesPrimaryCsv.children.internal.description'
  | 'childScenesPrimaryCsv.children.internal.fieldOwners'
  | 'childScenesPrimaryCsv.children.internal.ignoreType'
  | 'childScenesPrimaryCsv.children.internal.mediaType'
  | 'childScenesPrimaryCsv.children.internal.owner'
  | 'childScenesPrimaryCsv.children.internal.type'
  | 'childScenesPrimaryCsv.children.parent.children'
  | 'childScenesPrimaryCsv.children.parent.id'
  | 'childScenesPrimaryCsv.gatsbyPath'
  | 'childScenesPrimaryCsv.id'
  | 'childScenesPrimaryCsv.internal.content'
  | 'childScenesPrimaryCsv.internal.contentDigest'
  | 'childScenesPrimaryCsv.internal.description'
  | 'childScenesPrimaryCsv.internal.fieldOwners'
  | 'childScenesPrimaryCsv.internal.ignoreType'
  | 'childScenesPrimaryCsv.internal.mediaType'
  | 'childScenesPrimaryCsv.internal.owner'
  | 'childScenesPrimaryCsv.internal.type'
  | 'childScenesPrimaryCsv.leftOfBicycleLane'
  | 'childScenesPrimaryCsv.location'
  | 'childScenesPrimaryCsv.parent.children'
  | 'childScenesPrimaryCsv.parent.children.children'
  | 'childScenesPrimaryCsv.parent.children.id'
  | 'childScenesPrimaryCsv.parent.id'
  | 'childScenesPrimaryCsv.parent.internal.content'
  | 'childScenesPrimaryCsv.parent.internal.contentDigest'
  | 'childScenesPrimaryCsv.parent.internal.description'
  | 'childScenesPrimaryCsv.parent.internal.fieldOwners'
  | 'childScenesPrimaryCsv.parent.internal.ignoreType'
  | 'childScenesPrimaryCsv.parent.internal.mediaType'
  | 'childScenesPrimaryCsv.parent.internal.owner'
  | 'childScenesPrimaryCsv.parent.internal.type'
  | 'childScenesPrimaryCsv.parent.parent.children'
  | 'childScenesPrimaryCsv.parent.parent.id'
  | 'childScenesPrimaryCsv.parking'
  | 'childScenesPrimaryCsv.pavementHasShops'
  | 'childScenesPrimaryCsv.pavementWidth'
  | 'childScenesPrimaryCsv.pavementWidthNumber'
  | 'childScenesPrimaryCsv.pointOfView'
  | 'childScenesPrimaryCsv.sceneId'
  | 'childScenesPrimaryCsv.sceneIdCar'
  | 'childScenesPrimaryCsv.sceneIdCount'
  | 'childScenesPrimaryCsv.sceneIdPedestrian'
  | 'childScenesPrimaryCsv.surroundings'
  | 'childScenesPrimaryCsv.vehicleLaneMaxspeed'
  | 'childScenesPrimaryCsv.vehicleLaneUsage'
  | 'childScenesPrimaryCsv.vehicleTrafficVolume'
  | 'childScenesPrimaryCsv.vote0Unsafe'
  | 'childScenesPrimaryCsv.vote1RatherUnsafe'
  | 'childScenesPrimaryCsv.vote2Save'
  | 'childScenesPrimaryCsv.vote3VerySave'
  | 'childScenesPrimaryCsv.voteCount'
  | 'childScenesPrimaryCsv.voteMeans'
  | 'childScenesPrimaryCsv.voteScore'
  | 'childScenesPrimaryCsv.voteScoreCar'
  | 'childScenesPrimaryCsv.voteScorePedestrian'
  | 'childScenesSecondaryCsv.DE__Basisszenario'
  | 'childScenesSecondaryCsv.DE__Experiment'
  | 'childScenesSecondaryCsv.DE__FS_Breite'
  | 'childScenesSecondaryCsv.DE__Kamera'
  | 'childScenesSecondaryCsv.DE__Parken'
  | 'childScenesSecondaryCsv.DE__Richtungsfreigabe'
  | 'childScenesSecondaryCsv.DE__SceneID'
  | 'childScenesSecondaryCsv.DE__Verkehrsaufkommen'
  | 'childScenesSecondaryCsv.DE__besondere_Merkmale'
  | 'childScenesSecondaryCsv.TODO__slug'
  | 'childScenesSecondaryCsv.bicycleStreetType'
  | 'childScenesSecondaryCsv.children'
  | 'childScenesSecondaryCsv.children.children'
  | 'childScenesSecondaryCsv.children.children.children'
  | 'childScenesSecondaryCsv.children.children.id'
  | 'childScenesSecondaryCsv.children.id'
  | 'childScenesSecondaryCsv.children.internal.content'
  | 'childScenesSecondaryCsv.children.internal.contentDigest'
  | 'childScenesSecondaryCsv.children.internal.description'
  | 'childScenesSecondaryCsv.children.internal.fieldOwners'
  | 'childScenesSecondaryCsv.children.internal.ignoreType'
  | 'childScenesSecondaryCsv.children.internal.mediaType'
  | 'childScenesSecondaryCsv.children.internal.owner'
  | 'childScenesSecondaryCsv.children.internal.type'
  | 'childScenesSecondaryCsv.children.parent.children'
  | 'childScenesSecondaryCsv.children.parent.id'
  | 'childScenesSecondaryCsv.id'
  | 'childScenesSecondaryCsv.imageUrl'
  | 'childScenesSecondaryCsv.internal.content'
  | 'childScenesSecondaryCsv.internal.contentDigest'
  | 'childScenesSecondaryCsv.internal.description'
  | 'childScenesSecondaryCsv.internal.fieldOwners'
  | 'childScenesSecondaryCsv.internal.ignoreType'
  | 'childScenesSecondaryCsv.internal.mediaType'
  | 'childScenesSecondaryCsv.internal.owner'
  | 'childScenesSecondaryCsv.internal.type'
  | 'childScenesSecondaryCsv.location'
  | 'childScenesSecondaryCsv.motorVehicleTrafficVolumen'
  | 'childScenesSecondaryCsv.motorVehicleWidth'
  | 'childScenesSecondaryCsv.motorVehicleWidthName'
  | 'childScenesSecondaryCsv.parent.children'
  | 'childScenesSecondaryCsv.parent.children.children'
  | 'childScenesSecondaryCsv.parent.children.id'
  | 'childScenesSecondaryCsv.parent.id'
  | 'childScenesSecondaryCsv.parent.internal.content'
  | 'childScenesSecondaryCsv.parent.internal.contentDigest'
  | 'childScenesSecondaryCsv.parent.internal.description'
  | 'childScenesSecondaryCsv.parent.internal.fieldOwners'
  | 'childScenesSecondaryCsv.parent.internal.ignoreType'
  | 'childScenesSecondaryCsv.parent.internal.mediaType'
  | 'childScenesSecondaryCsv.parent.internal.owner'
  | 'childScenesSecondaryCsv.parent.internal.type'
  | 'childScenesSecondaryCsv.parent.parent.children'
  | 'childScenesSecondaryCsv.parent.parent.id'
  | 'childScenesSecondaryCsv.parkingCategory'
  | 'childScenesSecondaryCsv.pointOfView'
  | 'childScenesSecondaryCsv.sceneId'
  | 'childScenesSecondaryCsv.todoMotorVehicleDirection'
  | 'childScenesSecondaryCsv.vote0Unsafe'
  | 'childScenesSecondaryCsv.vote1RatherUnsafe'
  | 'childScenesSecondaryCsv.vote2Save'
  | 'childScenesSecondaryCsv.vote3VerySave'
  | 'childScenesSecondaryCsv.voteCount'
  | 'childScenesSecondaryCsv.voteMeans'
  | 'childScenesSecondaryCsv.voteSum'
  | 'children'
  | 'childrenScenesPrimaryCsv'
  | 'childrenScenesPrimaryCsv.DE__Basisszenario'
  | 'childrenScenesPrimaryCsv.DE__Breite_RVA_nutzbar'
  | 'childrenScenesPrimaryCsv.DE__Experiment'
  | 'childrenScenesPrimaryCsv.DE__FS_Art'
  | 'childrenScenesPrimaryCsv.DE__FS_Geschwindigkeit'
  | 'childrenScenesPrimaryCsv.DE__GW_Breite'
  | 'childrenScenesPrimaryCsv.DE__GW_Gesch_ftsnutzung'
  | 'childrenScenesPrimaryCsv.DE__Kamera'
  | 'childrenScenesPrimaryCsv.DE__Links_RVA'
  | 'childrenScenesPrimaryCsv.DE__Parken'
  | 'childrenScenesPrimaryCsv.DE__Protected'
  | 'childrenScenesPrimaryCsv.DE__RVA_Breite'
  | 'childrenScenesPrimaryCsv.DE__RVA_Lage'
  | 'childrenScenesPrimaryCsv.DE__RVA_Oberfl_che'
  | 'childrenScenesPrimaryCsv.DE__SceneID'
  | 'childrenScenesPrimaryCsv.DE__Seitenraum'
  | 'childrenScenesPrimaryCsv.DE__Tr_li_Art'
  | 'childrenScenesPrimaryCsv.DE__Tr_li_Breite'
  | 'childrenScenesPrimaryCsv.DE__Tr_li_Markierung'
  | 'childrenScenesPrimaryCsv.DE__Tr_li_baulTrennung'
  | 'childrenScenesPrimaryCsv.DE__Tr_re_Art'
  | 'childrenScenesPrimaryCsv.DE__Tr_re_Breite'
  | 'childrenScenesPrimaryCsv.DE__Tr_re_Markierung'
  | 'childrenScenesPrimaryCsv.DE__Verkehrsaufkommen'
  | 'childrenScenesPrimaryCsv.HELPER__imageUrl'
  | 'childrenScenesPrimaryCsv.HELPER__sceneNumber'
  | 'childrenScenesPrimaryCsv.TODO__slug'
  | 'childrenScenesPrimaryCsv.bicycleLaneSurface'
  | 'childrenScenesPrimaryCsv.bicycleLaneUsableWidthNumber'
  | 'childrenScenesPrimaryCsv.bicycleLaneWidth'
  | 'childrenScenesPrimaryCsv.bicycleLaneWidthNumber'
  | 'childrenScenesPrimaryCsv.bufferHasPhysicalProtection'
  | 'childrenScenesPrimaryCsv.bufferLeftMarking'
  | 'childrenScenesPrimaryCsv.bufferLeftPhysicalProtection'
  | 'childrenScenesPrimaryCsv.bufferLeftWidth'
  | 'childrenScenesPrimaryCsv.bufferLeftWidthNumber'
  | 'childrenScenesPrimaryCsv.bufferRightMarking'
  | 'childrenScenesPrimaryCsv.bufferRightWidth'
  | 'childrenScenesPrimaryCsv.bufferRightWidthNumber'
  | 'childrenScenesPrimaryCsv.children'
  | 'childrenScenesPrimaryCsv.children.children'
  | 'childrenScenesPrimaryCsv.children.children.children'
  | 'childrenScenesPrimaryCsv.children.children.id'
  | 'childrenScenesPrimaryCsv.children.id'
  | 'childrenScenesPrimaryCsv.children.internal.content'
  | 'childrenScenesPrimaryCsv.children.internal.contentDigest'
  | 'childrenScenesPrimaryCsv.children.internal.description'
  | 'childrenScenesPrimaryCsv.children.internal.fieldOwners'
  | 'childrenScenesPrimaryCsv.children.internal.ignoreType'
  | 'childrenScenesPrimaryCsv.children.internal.mediaType'
  | 'childrenScenesPrimaryCsv.children.internal.owner'
  | 'childrenScenesPrimaryCsv.children.internal.type'
  | 'childrenScenesPrimaryCsv.children.parent.children'
  | 'childrenScenesPrimaryCsv.children.parent.id'
  | 'childrenScenesPrimaryCsv.gatsbyPath'
  | 'childrenScenesPrimaryCsv.id'
  | 'childrenScenesPrimaryCsv.internal.content'
  | 'childrenScenesPrimaryCsv.internal.contentDigest'
  | 'childrenScenesPrimaryCsv.internal.description'
  | 'childrenScenesPrimaryCsv.internal.fieldOwners'
  | 'childrenScenesPrimaryCsv.internal.ignoreType'
  | 'childrenScenesPrimaryCsv.internal.mediaType'
  | 'childrenScenesPrimaryCsv.internal.owner'
  | 'childrenScenesPrimaryCsv.internal.type'
  | 'childrenScenesPrimaryCsv.leftOfBicycleLane'
  | 'childrenScenesPrimaryCsv.location'
  | 'childrenScenesPrimaryCsv.parent.children'
  | 'childrenScenesPrimaryCsv.parent.children.children'
  | 'childrenScenesPrimaryCsv.parent.children.id'
  | 'childrenScenesPrimaryCsv.parent.id'
  | 'childrenScenesPrimaryCsv.parent.internal.content'
  | 'childrenScenesPrimaryCsv.parent.internal.contentDigest'
  | 'childrenScenesPrimaryCsv.parent.internal.description'
  | 'childrenScenesPrimaryCsv.parent.internal.fieldOwners'
  | 'childrenScenesPrimaryCsv.parent.internal.ignoreType'
  | 'childrenScenesPrimaryCsv.parent.internal.mediaType'
  | 'childrenScenesPrimaryCsv.parent.internal.owner'
  | 'childrenScenesPrimaryCsv.parent.internal.type'
  | 'childrenScenesPrimaryCsv.parent.parent.children'
  | 'childrenScenesPrimaryCsv.parent.parent.id'
  | 'childrenScenesPrimaryCsv.parking'
  | 'childrenScenesPrimaryCsv.pavementHasShops'
  | 'childrenScenesPrimaryCsv.pavementWidth'
  | 'childrenScenesPrimaryCsv.pavementWidthNumber'
  | 'childrenScenesPrimaryCsv.pointOfView'
  | 'childrenScenesPrimaryCsv.sceneId'
  | 'childrenScenesPrimaryCsv.sceneIdCar'
  | 'childrenScenesPrimaryCsv.sceneIdCount'
  | 'childrenScenesPrimaryCsv.sceneIdPedestrian'
  | 'childrenScenesPrimaryCsv.surroundings'
  | 'childrenScenesPrimaryCsv.vehicleLaneMaxspeed'
  | 'childrenScenesPrimaryCsv.vehicleLaneUsage'
  | 'childrenScenesPrimaryCsv.vehicleTrafficVolume'
  | 'childrenScenesPrimaryCsv.vote0Unsafe'
  | 'childrenScenesPrimaryCsv.vote1RatherUnsafe'
  | 'childrenScenesPrimaryCsv.vote2Save'
  | 'childrenScenesPrimaryCsv.vote3VerySave'
  | 'childrenScenesPrimaryCsv.voteCount'
  | 'childrenScenesPrimaryCsv.voteMeans'
  | 'childrenScenesPrimaryCsv.voteScore'
  | 'childrenScenesPrimaryCsv.voteScoreCar'
  | 'childrenScenesPrimaryCsv.voteScorePedestrian'
  | 'childrenScenesSecondaryCsv'
  | 'childrenScenesSecondaryCsv.DE__Basisszenario'
  | 'childrenScenesSecondaryCsv.DE__Experiment'
  | 'childrenScenesSecondaryCsv.DE__FS_Breite'
  | 'childrenScenesSecondaryCsv.DE__Kamera'
  | 'childrenScenesSecondaryCsv.DE__Parken'
  | 'childrenScenesSecondaryCsv.DE__Richtungsfreigabe'
  | 'childrenScenesSecondaryCsv.DE__SceneID'
  | 'childrenScenesSecondaryCsv.DE__Verkehrsaufkommen'
  | 'childrenScenesSecondaryCsv.DE__besondere_Merkmale'
  | 'childrenScenesSecondaryCsv.TODO__slug'
  | 'childrenScenesSecondaryCsv.bicycleStreetType'
  | 'childrenScenesSecondaryCsv.children'
  | 'childrenScenesSecondaryCsv.children.children'
  | 'childrenScenesSecondaryCsv.children.children.children'
  | 'childrenScenesSecondaryCsv.children.children.id'
  | 'childrenScenesSecondaryCsv.children.id'
  | 'childrenScenesSecondaryCsv.children.internal.content'
  | 'childrenScenesSecondaryCsv.children.internal.contentDigest'
  | 'childrenScenesSecondaryCsv.children.internal.description'
  | 'childrenScenesSecondaryCsv.children.internal.fieldOwners'
  | 'childrenScenesSecondaryCsv.children.internal.ignoreType'
  | 'childrenScenesSecondaryCsv.children.internal.mediaType'
  | 'childrenScenesSecondaryCsv.children.internal.owner'
  | 'childrenScenesSecondaryCsv.children.internal.type'
  | 'childrenScenesSecondaryCsv.children.parent.children'
  | 'childrenScenesSecondaryCsv.children.parent.id'
  | 'childrenScenesSecondaryCsv.id'
  | 'childrenScenesSecondaryCsv.imageUrl'
  | 'childrenScenesSecondaryCsv.internal.content'
  | 'childrenScenesSecondaryCsv.internal.contentDigest'
  | 'childrenScenesSecondaryCsv.internal.description'
  | 'childrenScenesSecondaryCsv.internal.fieldOwners'
  | 'childrenScenesSecondaryCsv.internal.ignoreType'
  | 'childrenScenesSecondaryCsv.internal.mediaType'
  | 'childrenScenesSecondaryCsv.internal.owner'
  | 'childrenScenesSecondaryCsv.internal.type'
  | 'childrenScenesSecondaryCsv.location'
  | 'childrenScenesSecondaryCsv.motorVehicleTrafficVolumen'
  | 'childrenScenesSecondaryCsv.motorVehicleWidth'
  | 'childrenScenesSecondaryCsv.motorVehicleWidthName'
  | 'childrenScenesSecondaryCsv.parent.children'
  | 'childrenScenesSecondaryCsv.parent.children.children'
  | 'childrenScenesSecondaryCsv.parent.children.id'
  | 'childrenScenesSecondaryCsv.parent.id'
  | 'childrenScenesSecondaryCsv.parent.internal.content'
  | 'childrenScenesSecondaryCsv.parent.internal.contentDigest'
  | 'childrenScenesSecondaryCsv.parent.internal.description'
  | 'childrenScenesSecondaryCsv.parent.internal.fieldOwners'
  | 'childrenScenesSecondaryCsv.parent.internal.ignoreType'
  | 'childrenScenesSecondaryCsv.parent.internal.mediaType'
  | 'childrenScenesSecondaryCsv.parent.internal.owner'
  | 'childrenScenesSecondaryCsv.parent.internal.type'
  | 'childrenScenesSecondaryCsv.parent.parent.children'
  | 'childrenScenesSecondaryCsv.parent.parent.id'
  | 'childrenScenesSecondaryCsv.parkingCategory'
  | 'childrenScenesSecondaryCsv.pointOfView'
  | 'childrenScenesSecondaryCsv.sceneId'
  | 'childrenScenesSecondaryCsv.todoMotorVehicleDirection'
  | 'childrenScenesSecondaryCsv.vote0Unsafe'
  | 'childrenScenesSecondaryCsv.vote1RatherUnsafe'
  | 'childrenScenesSecondaryCsv.vote2Save'
  | 'childrenScenesSecondaryCsv.vote3VerySave'
  | 'childrenScenesSecondaryCsv.voteCount'
  | 'childrenScenesSecondaryCsv.voteMeans'
  | 'childrenScenesSecondaryCsv.voteSum'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childScenesPrimaryCsv: InputMaybe<ScenesPrimaryCsvFilterInput>;
  readonly childScenesSecondaryCsv: InputMaybe<ScenesSecondaryCsvFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenScenesPrimaryCsv: InputMaybe<ScenesPrimaryCsvFilterListInput>;
  readonly childrenScenesSecondaryCsv: InputMaybe<ScenesSecondaryCsvFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allScenesPrimaryCsv: ScenesPrimaryCsvConnection;
  readonly allScenesSecondaryCsv: ScenesSecondaryCsvConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly scenesPrimaryCsv: Maybe<ScenesPrimaryCsv>;
  readonly scenesSecondaryCsv: Maybe<ScenesSecondaryCsv>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allScenesPrimaryCsvArgs = {
  filter: InputMaybe<ScenesPrimaryCsvFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ScenesPrimaryCsvSortInput>;
};


type Query_allScenesSecondaryCsvArgs = {
  filter: InputMaybe<ScenesSecondaryCsvFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ScenesSecondaryCsvSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childScenesPrimaryCsv: InputMaybe<ScenesPrimaryCsvFilterInput>;
  childScenesSecondaryCsv: InputMaybe<ScenesSecondaryCsvFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenScenesPrimaryCsv: InputMaybe<ScenesPrimaryCsvFilterListInput>;
  childrenScenesSecondaryCsv: InputMaybe<ScenesSecondaryCsvFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_scenesPrimaryCsvArgs = {
  DE__Basisszenario: InputMaybe<StringQueryOperatorInput>;
  DE__Breite_RVA_nutzbar: InputMaybe<StringQueryOperatorInput>;
  DE__Experiment: InputMaybe<StringQueryOperatorInput>;
  DE__FS_Art: InputMaybe<StringQueryOperatorInput>;
  DE__FS_Geschwindigkeit: InputMaybe<StringQueryOperatorInput>;
  DE__GW_Breite: InputMaybe<StringQueryOperatorInput>;
  DE__GW_Gesch_ftsnutzung: InputMaybe<StringQueryOperatorInput>;
  DE__Kamera: InputMaybe<StringQueryOperatorInput>;
  DE__Links_RVA: InputMaybe<StringQueryOperatorInput>;
  DE__Parken: InputMaybe<StringQueryOperatorInput>;
  DE__Protected: InputMaybe<StringQueryOperatorInput>;
  DE__RVA_Breite: InputMaybe<StringQueryOperatorInput>;
  DE__RVA_Lage: InputMaybe<StringQueryOperatorInput>;
  DE__RVA_Oberfl_che: InputMaybe<StringQueryOperatorInput>;
  DE__SceneID: InputMaybe<StringQueryOperatorInput>;
  DE__Seitenraum: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_li_Art: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_li_Breite: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_li_Markierung: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_li_baulTrennung: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_re_Art: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_re_Breite: InputMaybe<StringQueryOperatorInput>;
  DE__Tr_re_Markierung: InputMaybe<StringQueryOperatorInput>;
  DE__Verkehrsaufkommen: InputMaybe<StringQueryOperatorInput>;
  HELPER__imageUrl: InputMaybe<StringQueryOperatorInput>;
  HELPER__sceneNumber: InputMaybe<StringQueryOperatorInput>;
  TODO__slug: InputMaybe<StringQueryOperatorInput>;
  bicycleLaneSurface: InputMaybe<StringQueryOperatorInput>;
  bicycleLaneUsableWidthNumber: InputMaybe<StringQueryOperatorInput>;
  bicycleLaneWidth: InputMaybe<StringQueryOperatorInput>;
  bicycleLaneWidthNumber: InputMaybe<StringQueryOperatorInput>;
  bufferHasPhysicalProtection: InputMaybe<StringQueryOperatorInput>;
  bufferLeftMarking: InputMaybe<StringQueryOperatorInput>;
  bufferLeftPhysicalProtection: InputMaybe<StringQueryOperatorInput>;
  bufferLeftWidth: InputMaybe<StringQueryOperatorInput>;
  bufferLeftWidthNumber: InputMaybe<StringQueryOperatorInput>;
  bufferRightMarking: InputMaybe<StringQueryOperatorInput>;
  bufferRightWidth: InputMaybe<StringQueryOperatorInput>;
  bufferRightWidthNumber: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  leftOfBicycleLane: InputMaybe<StringQueryOperatorInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parking: InputMaybe<StringQueryOperatorInput>;
  pavementHasShops: InputMaybe<StringQueryOperatorInput>;
  pavementWidth: InputMaybe<StringQueryOperatorInput>;
  pavementWidthNumber: InputMaybe<StringQueryOperatorInput>;
  pointOfView: InputMaybe<StringQueryOperatorInput>;
  sceneId: InputMaybe<StringQueryOperatorInput>;
  sceneIdCar: InputMaybe<StringQueryOperatorInput>;
  sceneIdCount: InputMaybe<StringQueryOperatorInput>;
  sceneIdPedestrian: InputMaybe<StringQueryOperatorInput>;
  surroundings: InputMaybe<StringQueryOperatorInput>;
  vehicleLaneMaxspeed: InputMaybe<StringQueryOperatorInput>;
  vehicleLaneUsage: InputMaybe<StringQueryOperatorInput>;
  vehicleTrafficVolume: InputMaybe<StringQueryOperatorInput>;
  vote0Unsafe: InputMaybe<StringQueryOperatorInput>;
  vote1RatherUnsafe: InputMaybe<StringQueryOperatorInput>;
  vote2Save: InputMaybe<StringQueryOperatorInput>;
  vote3VerySave: InputMaybe<StringQueryOperatorInput>;
  voteCount: InputMaybe<StringQueryOperatorInput>;
  voteMeans: InputMaybe<StringQueryOperatorInput>;
  voteScore: InputMaybe<StringQueryOperatorInput>;
  voteScoreCar: InputMaybe<StringQueryOperatorInput>;
  voteScorePedestrian: InputMaybe<StringQueryOperatorInput>;
};


type Query_scenesSecondaryCsvArgs = {
  DE__Basisszenario: InputMaybe<StringQueryOperatorInput>;
  DE__Experiment: InputMaybe<StringQueryOperatorInput>;
  DE__FS_Breite: InputMaybe<StringQueryOperatorInput>;
  DE__Kamera: InputMaybe<StringQueryOperatorInput>;
  DE__Parken: InputMaybe<StringQueryOperatorInput>;
  DE__Richtungsfreigabe: InputMaybe<StringQueryOperatorInput>;
  DE__SceneID: InputMaybe<StringQueryOperatorInput>;
  DE__Verkehrsaufkommen: InputMaybe<StringQueryOperatorInput>;
  DE__besondere_Merkmale: InputMaybe<StringQueryOperatorInput>;
  TODO__slug: InputMaybe<StringQueryOperatorInput>;
  bicycleStreetType: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  imageUrl: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  motorVehicleTrafficVolumen: InputMaybe<StringQueryOperatorInput>;
  motorVehicleWidth: InputMaybe<StringQueryOperatorInput>;
  motorVehicleWidthName: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parkingCategory: InputMaybe<StringQueryOperatorInput>;
  pointOfView: InputMaybe<StringQueryOperatorInput>;
  sceneId: InputMaybe<StringQueryOperatorInput>;
  todoMotorVehicleDirection: InputMaybe<StringQueryOperatorInput>;
  vote0Unsafe: InputMaybe<StringQueryOperatorInput>;
  vote1RatherUnsafe: InputMaybe<StringQueryOperatorInput>;
  vote2Save: InputMaybe<StringQueryOperatorInput>;
  vote3VerySave: InputMaybe<StringQueryOperatorInput>;
  voteCount: InputMaybe<StringQueryOperatorInput>;
  voteMeans: InputMaybe<StringQueryOperatorInput>;
  voteSum: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type ScenesPrimaryCsv = Node & {
  readonly DE__Basisszenario: Maybe<Scalars['String']>;
  readonly DE__Breite_RVA_nutzbar: Maybe<Scalars['String']>;
  readonly DE__Experiment: Maybe<Scalars['String']>;
  readonly DE__FS_Art: Maybe<Scalars['String']>;
  readonly DE__FS_Geschwindigkeit: Maybe<Scalars['String']>;
  readonly DE__GW_Breite: Maybe<Scalars['String']>;
  readonly DE__GW_Gesch_ftsnutzung: Maybe<Scalars['String']>;
  readonly DE__Kamera: Maybe<Scalars['String']>;
  readonly DE__Links_RVA: Maybe<Scalars['String']>;
  readonly DE__Parken: Maybe<Scalars['String']>;
  readonly DE__Protected: Maybe<Scalars['String']>;
  readonly DE__RVA_Breite: Maybe<Scalars['String']>;
  readonly DE__RVA_Lage: Maybe<Scalars['String']>;
  readonly DE__RVA_Oberfl_che: Maybe<Scalars['String']>;
  readonly DE__SceneID: Maybe<Scalars['String']>;
  readonly DE__Seitenraum: Maybe<Scalars['String']>;
  readonly DE__Tr_li_Art: Maybe<Scalars['String']>;
  readonly DE__Tr_li_Breite: Maybe<Scalars['String']>;
  readonly DE__Tr_li_Markierung: Maybe<Scalars['String']>;
  readonly DE__Tr_li_baulTrennung: Maybe<Scalars['String']>;
  readonly DE__Tr_re_Art: Maybe<Scalars['String']>;
  readonly DE__Tr_re_Breite: Maybe<Scalars['String']>;
  readonly DE__Tr_re_Markierung: Maybe<Scalars['String']>;
  readonly DE__Verkehrsaufkommen: Maybe<Scalars['String']>;
  readonly HELPER__imageUrl: Maybe<Scalars['String']>;
  readonly HELPER__sceneNumber: Maybe<Scalars['String']>;
  readonly TODO__slug: Maybe<Scalars['String']>;
  readonly bicycleLaneSurface: Maybe<Scalars['String']>;
  readonly bicycleLaneUsableWidthNumber: Maybe<Scalars['String']>;
  readonly bicycleLaneWidth: Maybe<Scalars['String']>;
  readonly bicycleLaneWidthNumber: Maybe<Scalars['String']>;
  readonly bufferHasPhysicalProtection: Maybe<Scalars['String']>;
  readonly bufferLeftMarking: Maybe<Scalars['String']>;
  readonly bufferLeftPhysicalProtection: Maybe<Scalars['String']>;
  readonly bufferLeftWidth: Maybe<Scalars['String']>;
  readonly bufferLeftWidthNumber: Maybe<Scalars['String']>;
  readonly bufferRightMarking: Maybe<Scalars['String']>;
  readonly bufferRightWidth: Maybe<Scalars['String']>;
  readonly bufferRightWidthNumber: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly leftOfBicycleLane: Maybe<Scalars['String']>;
  readonly location: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly parking: Maybe<Scalars['String']>;
  readonly pavementHasShops: Maybe<Scalars['String']>;
  readonly pavementWidth: Maybe<Scalars['String']>;
  readonly pavementWidthNumber: Maybe<Scalars['String']>;
  readonly pointOfView: Maybe<Scalars['String']>;
  readonly sceneId: Maybe<Scalars['String']>;
  readonly sceneIdCar: Maybe<Scalars['String']>;
  readonly sceneIdCount: Maybe<Scalars['String']>;
  readonly sceneIdPedestrian: Maybe<Scalars['String']>;
  readonly surroundings: Maybe<Scalars['String']>;
  readonly vehicleLaneMaxspeed: Maybe<Scalars['String']>;
  readonly vehicleLaneUsage: Maybe<Scalars['String']>;
  readonly vehicleTrafficVolume: Maybe<Scalars['String']>;
  readonly vote0Unsafe: Maybe<Scalars['String']>;
  readonly vote1RatherUnsafe: Maybe<Scalars['String']>;
  readonly vote2Save: Maybe<Scalars['String']>;
  readonly vote3VerySave: Maybe<Scalars['String']>;
  readonly voteCount: Maybe<Scalars['String']>;
  readonly voteMeans: Maybe<Scalars['String']>;
  readonly voteScore: Maybe<Scalars['String']>;
  readonly voteScoreCar: Maybe<Scalars['String']>;
  readonly voteScorePedestrian: Maybe<Scalars['String']>;
};


type ScenesPrimaryCsv_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};

type ScenesPrimaryCsvConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ScenesPrimaryCsvEdge>;
  readonly group: ReadonlyArray<ScenesPrimaryCsvGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ScenesPrimaryCsv>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ScenesPrimaryCsvConnection_distinctArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};


type ScenesPrimaryCsvConnection_groupArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ScenesPrimaryCsvConnection_maxArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};


type ScenesPrimaryCsvConnection_minArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};


type ScenesPrimaryCsvConnection_sumArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};

type ScenesPrimaryCsvEdge = {
  readonly next: Maybe<ScenesPrimaryCsv>;
  readonly node: ScenesPrimaryCsv;
  readonly previous: Maybe<ScenesPrimaryCsv>;
};

type ScenesPrimaryCsvFieldsEnum =
  | 'DE__Basisszenario'
  | 'DE__Breite_RVA_nutzbar'
  | 'DE__Experiment'
  | 'DE__FS_Art'
  | 'DE__FS_Geschwindigkeit'
  | 'DE__GW_Breite'
  | 'DE__GW_Gesch_ftsnutzung'
  | 'DE__Kamera'
  | 'DE__Links_RVA'
  | 'DE__Parken'
  | 'DE__Protected'
  | 'DE__RVA_Breite'
  | 'DE__RVA_Lage'
  | 'DE__RVA_Oberfl_che'
  | 'DE__SceneID'
  | 'DE__Seitenraum'
  | 'DE__Tr_li_Art'
  | 'DE__Tr_li_Breite'
  | 'DE__Tr_li_Markierung'
  | 'DE__Tr_li_baulTrennung'
  | 'DE__Tr_re_Art'
  | 'DE__Tr_re_Breite'
  | 'DE__Tr_re_Markierung'
  | 'DE__Verkehrsaufkommen'
  | 'HELPER__imageUrl'
  | 'HELPER__sceneNumber'
  | 'TODO__slug'
  | 'bicycleLaneSurface'
  | 'bicycleLaneUsableWidthNumber'
  | 'bicycleLaneWidth'
  | 'bicycleLaneWidthNumber'
  | 'bufferHasPhysicalProtection'
  | 'bufferLeftMarking'
  | 'bufferLeftPhysicalProtection'
  | 'bufferLeftWidth'
  | 'bufferLeftWidthNumber'
  | 'bufferRightMarking'
  | 'bufferRightWidth'
  | 'bufferRightWidthNumber'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'gatsbyPath'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'leftOfBicycleLane'
  | 'location'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'parking'
  | 'pavementHasShops'
  | 'pavementWidth'
  | 'pavementWidthNumber'
  | 'pointOfView'
  | 'sceneId'
  | 'sceneIdCar'
  | 'sceneIdCount'
  | 'sceneIdPedestrian'
  | 'surroundings'
  | 'vehicleLaneMaxspeed'
  | 'vehicleLaneUsage'
  | 'vehicleTrafficVolume'
  | 'vote0Unsafe'
  | 'vote1RatherUnsafe'
  | 'vote2Save'
  | 'vote3VerySave'
  | 'voteCount'
  | 'voteMeans'
  | 'voteScore'
  | 'voteScoreCar'
  | 'voteScorePedestrian';

type ScenesPrimaryCsvFilterInput = {
  readonly DE__Basisszenario: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Breite_RVA_nutzbar: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Experiment: InputMaybe<StringQueryOperatorInput>;
  readonly DE__FS_Art: InputMaybe<StringQueryOperatorInput>;
  readonly DE__FS_Geschwindigkeit: InputMaybe<StringQueryOperatorInput>;
  readonly DE__GW_Breite: InputMaybe<StringQueryOperatorInput>;
  readonly DE__GW_Gesch_ftsnutzung: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Kamera: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Links_RVA: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Parken: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Protected: InputMaybe<StringQueryOperatorInput>;
  readonly DE__RVA_Breite: InputMaybe<StringQueryOperatorInput>;
  readonly DE__RVA_Lage: InputMaybe<StringQueryOperatorInput>;
  readonly DE__RVA_Oberfl_che: InputMaybe<StringQueryOperatorInput>;
  readonly DE__SceneID: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Seitenraum: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_li_Art: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_li_Breite: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_li_Markierung: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_li_baulTrennung: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_re_Art: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_re_Breite: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Tr_re_Markierung: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Verkehrsaufkommen: InputMaybe<StringQueryOperatorInput>;
  readonly HELPER__imageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly HELPER__sceneNumber: InputMaybe<StringQueryOperatorInput>;
  readonly TODO__slug: InputMaybe<StringQueryOperatorInput>;
  readonly bicycleLaneSurface: InputMaybe<StringQueryOperatorInput>;
  readonly bicycleLaneUsableWidthNumber: InputMaybe<StringQueryOperatorInput>;
  readonly bicycleLaneWidth: InputMaybe<StringQueryOperatorInput>;
  readonly bicycleLaneWidthNumber: InputMaybe<StringQueryOperatorInput>;
  readonly bufferHasPhysicalProtection: InputMaybe<StringQueryOperatorInput>;
  readonly bufferLeftMarking: InputMaybe<StringQueryOperatorInput>;
  readonly bufferLeftPhysicalProtection: InputMaybe<StringQueryOperatorInput>;
  readonly bufferLeftWidth: InputMaybe<StringQueryOperatorInput>;
  readonly bufferLeftWidthNumber: InputMaybe<StringQueryOperatorInput>;
  readonly bufferRightMarking: InputMaybe<StringQueryOperatorInput>;
  readonly bufferRightWidth: InputMaybe<StringQueryOperatorInput>;
  readonly bufferRightWidthNumber: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly leftOfBicycleLane: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parking: InputMaybe<StringQueryOperatorInput>;
  readonly pavementHasShops: InputMaybe<StringQueryOperatorInput>;
  readonly pavementWidth: InputMaybe<StringQueryOperatorInput>;
  readonly pavementWidthNumber: InputMaybe<StringQueryOperatorInput>;
  readonly pointOfView: InputMaybe<StringQueryOperatorInput>;
  readonly sceneId: InputMaybe<StringQueryOperatorInput>;
  readonly sceneIdCar: InputMaybe<StringQueryOperatorInput>;
  readonly sceneIdCount: InputMaybe<StringQueryOperatorInput>;
  readonly sceneIdPedestrian: InputMaybe<StringQueryOperatorInput>;
  readonly surroundings: InputMaybe<StringQueryOperatorInput>;
  readonly vehicleLaneMaxspeed: InputMaybe<StringQueryOperatorInput>;
  readonly vehicleLaneUsage: InputMaybe<StringQueryOperatorInput>;
  readonly vehicleTrafficVolume: InputMaybe<StringQueryOperatorInput>;
  readonly vote0Unsafe: InputMaybe<StringQueryOperatorInput>;
  readonly vote1RatherUnsafe: InputMaybe<StringQueryOperatorInput>;
  readonly vote2Save: InputMaybe<StringQueryOperatorInput>;
  readonly vote3VerySave: InputMaybe<StringQueryOperatorInput>;
  readonly voteCount: InputMaybe<StringQueryOperatorInput>;
  readonly voteMeans: InputMaybe<StringQueryOperatorInput>;
  readonly voteScore: InputMaybe<StringQueryOperatorInput>;
  readonly voteScoreCar: InputMaybe<StringQueryOperatorInput>;
  readonly voteScorePedestrian: InputMaybe<StringQueryOperatorInput>;
};

type ScenesPrimaryCsvFilterListInput = {
  readonly elemMatch: InputMaybe<ScenesPrimaryCsvFilterInput>;
};

type ScenesPrimaryCsvGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ScenesPrimaryCsvEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ScenesPrimaryCsvGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ScenesPrimaryCsv>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ScenesPrimaryCsvGroupConnection_distinctArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};


type ScenesPrimaryCsvGroupConnection_groupArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ScenesPrimaryCsvGroupConnection_maxArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};


type ScenesPrimaryCsvGroupConnection_minArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};


type ScenesPrimaryCsvGroupConnection_sumArgs = {
  field: ScenesPrimaryCsvFieldsEnum;
};

type ScenesPrimaryCsvSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ScenesPrimaryCsvFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ScenesSecondaryCsv = Node & {
  readonly DE__Basisszenario: Maybe<Scalars['String']>;
  readonly DE__Experiment: Maybe<Scalars['String']>;
  readonly DE__FS_Breite: Maybe<Scalars['String']>;
  readonly DE__Kamera: Maybe<Scalars['String']>;
  readonly DE__Parken: Maybe<Scalars['String']>;
  readonly DE__Richtungsfreigabe: Maybe<Scalars['String']>;
  readonly DE__SceneID: Maybe<Scalars['String']>;
  readonly DE__Verkehrsaufkommen: Maybe<Scalars['String']>;
  readonly DE__besondere_Merkmale: Maybe<Scalars['String']>;
  readonly TODO__slug: Maybe<Scalars['String']>;
  readonly bicycleStreetType: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly imageUrl: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly location: Maybe<Scalars['String']>;
  readonly motorVehicleTrafficVolumen: Maybe<Scalars['String']>;
  readonly motorVehicleWidth: Maybe<Scalars['String']>;
  readonly motorVehicleWidthName: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly parkingCategory: Maybe<Scalars['String']>;
  readonly pointOfView: Maybe<Scalars['String']>;
  readonly sceneId: Maybe<Scalars['String']>;
  readonly todoMotorVehicleDirection: Maybe<Scalars['String']>;
  readonly vote0Unsafe: Maybe<Scalars['String']>;
  readonly vote1RatherUnsafe: Maybe<Scalars['String']>;
  readonly vote2Save: Maybe<Scalars['String']>;
  readonly vote3VerySave: Maybe<Scalars['String']>;
  readonly voteCount: Maybe<Scalars['String']>;
  readonly voteMeans: Maybe<Scalars['String']>;
  readonly voteSum: Maybe<Scalars['String']>;
};

type ScenesSecondaryCsvConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ScenesSecondaryCsvEdge>;
  readonly group: ReadonlyArray<ScenesSecondaryCsvGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ScenesSecondaryCsv>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ScenesSecondaryCsvConnection_distinctArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};


type ScenesSecondaryCsvConnection_groupArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ScenesSecondaryCsvConnection_maxArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};


type ScenesSecondaryCsvConnection_minArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};


type ScenesSecondaryCsvConnection_sumArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};

type ScenesSecondaryCsvEdge = {
  readonly next: Maybe<ScenesSecondaryCsv>;
  readonly node: ScenesSecondaryCsv;
  readonly previous: Maybe<ScenesSecondaryCsv>;
};

type ScenesSecondaryCsvFieldsEnum =
  | 'DE__Basisszenario'
  | 'DE__Experiment'
  | 'DE__FS_Breite'
  | 'DE__Kamera'
  | 'DE__Parken'
  | 'DE__Richtungsfreigabe'
  | 'DE__SceneID'
  | 'DE__Verkehrsaufkommen'
  | 'DE__besondere_Merkmale'
  | 'TODO__slug'
  | 'bicycleStreetType'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'imageUrl'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'location'
  | 'motorVehicleTrafficVolumen'
  | 'motorVehicleWidth'
  | 'motorVehicleWidthName'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'parkingCategory'
  | 'pointOfView'
  | 'sceneId'
  | 'todoMotorVehicleDirection'
  | 'vote0Unsafe'
  | 'vote1RatherUnsafe'
  | 'vote2Save'
  | 'vote3VerySave'
  | 'voteCount'
  | 'voteMeans'
  | 'voteSum';

type ScenesSecondaryCsvFilterInput = {
  readonly DE__Basisszenario: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Experiment: InputMaybe<StringQueryOperatorInput>;
  readonly DE__FS_Breite: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Kamera: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Parken: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Richtungsfreigabe: InputMaybe<StringQueryOperatorInput>;
  readonly DE__SceneID: InputMaybe<StringQueryOperatorInput>;
  readonly DE__Verkehrsaufkommen: InputMaybe<StringQueryOperatorInput>;
  readonly DE__besondere_Merkmale: InputMaybe<StringQueryOperatorInput>;
  readonly TODO__slug: InputMaybe<StringQueryOperatorInput>;
  readonly bicycleStreetType: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly imageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly motorVehicleTrafficVolumen: InputMaybe<StringQueryOperatorInput>;
  readonly motorVehicleWidth: InputMaybe<StringQueryOperatorInput>;
  readonly motorVehicleWidthName: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parkingCategory: InputMaybe<StringQueryOperatorInput>;
  readonly pointOfView: InputMaybe<StringQueryOperatorInput>;
  readonly sceneId: InputMaybe<StringQueryOperatorInput>;
  readonly todoMotorVehicleDirection: InputMaybe<StringQueryOperatorInput>;
  readonly vote0Unsafe: InputMaybe<StringQueryOperatorInput>;
  readonly vote1RatherUnsafe: InputMaybe<StringQueryOperatorInput>;
  readonly vote2Save: InputMaybe<StringQueryOperatorInput>;
  readonly vote3VerySave: InputMaybe<StringQueryOperatorInput>;
  readonly voteCount: InputMaybe<StringQueryOperatorInput>;
  readonly voteMeans: InputMaybe<StringQueryOperatorInput>;
  readonly voteSum: InputMaybe<StringQueryOperatorInput>;
};

type ScenesSecondaryCsvFilterListInput = {
  readonly elemMatch: InputMaybe<ScenesSecondaryCsvFilterInput>;
};

type ScenesSecondaryCsvGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ScenesSecondaryCsvEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ScenesSecondaryCsvGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ScenesSecondaryCsv>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ScenesSecondaryCsvGroupConnection_distinctArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};


type ScenesSecondaryCsvGroupConnection_groupArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ScenesSecondaryCsvGroupConnection_maxArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};


type ScenesSecondaryCsvGroupConnection_minArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};


type ScenesSecondaryCsvGroupConnection_sumArgs = {
  field: ScenesSecondaryCsvFieldsEnum;
};

type ScenesSecondaryCsvSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ScenesSecondaryCsvFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'flags.GRAPHQL_TYPEGEN'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly GRAPHQL_TYPEGEN: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFilterInput = {
  readonly GRAPHQL_TYPEGEN: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};


}
